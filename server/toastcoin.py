from web3 import Web3, HTTPProvider, IPCProvider
from hashlib import blake2b
import json

class ToastCoin:

    BYTE_CODE = '6060604052341561000f57600080fd5b600060028190555032600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612710600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061091b806100ce6000396000f30060606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630b40bd88146100865780630ee2cb10146100ff5780631006b827146101545780631e59c529146101a5578063437869591461023957806390b98a1114610262578063f8b2cb4f146102bc575b600080fd5b341561009157600080fd5b6100e5600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610309565b604051808215151515815260200191505060405180910390f35b341561010a57600080fd5b610112610463565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561015f57600080fd5b61018b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061048d565b604051808215151515815260200191505060405180910390f35b34156101b057600080fd5b61021f600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061057e565b604051808215151515815260200191505060405180910390f35b341561024457600080fd5b61024c61078d565b6040518082815260200191505060405180910390f35b341561026d57600080fd5b6102a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610796565b604051808215151515815260200191505060405180910390f35b34156102c757600080fd5b6102f3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506107aa565b6040518082815260200191505060405180910390f35b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561035a576000905061045c565b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610577610572600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105685780601f1061053d57610100808354040283529160200191610568565b820191906000526020600020905b81548152906001019060200180831161054b57829003601f168201915b50505050506107f2565b610820565b9050919050565b600061059161058c846107f2565b610820565b15151561059d57600080fd5b610685610680600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106765780601f1061064b57610100808354040283529160200191610676565b820191906000526020600020905b81548152906001019060200180831161065957829003601f168201915b50505050506107f2565b610820565b151561069057600080fd5b600160026000828254019250508190555082600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906106f4929190610830565b508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61076e61078d565b6040518082815260200191505060405180910390a36001905092915050565b6000600a905090565b60006107a3338484610309565b5092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107fa6108b0565b600060208301905060408051908101604052808451815260200182815250915050919050565b6000808260000151149050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061087157805160ff191683800117855561089f565b8280016001018555821561089f579182015b8281111561089e578251825591602001919060010190610883565b5b5090506108ac91906108ca565b5090565b604080519081016040528060008152602001600081525090565b6108ec91905b808211156108e85760008160009055506001016108d0565b5090565b905600a165627a7a7230582017a45cbfeab839e1ccb0c0f8546d668a804afbfc4d211e306cad4728ec6dca310029'

    def __init__(self, contract_addr, abi_file='../toastcontracts/build/contracts/ToastCoin.json', host='http://localhost:8545'):
        self.host = host
        self.abi_file = abi_file
        self.web3 = Web3(HTTPProvider(host))
        self.contract_addr = contract_addr
        with open(abi_file, 'r') as abi_definition:
            abi = json.load(abi_definition)
        self.contract = self.web3.eth.contract(abi, self.contract_addr, bytecode=ToastCoin.BYTE_CODE)
        print(self)
        print("Current block number: %d" % self.web3.eth.blockNumber)

    def __str__(self):
        return "ToastCoin: %s, %s, %s" % (self.contract_addr, self.abi_file, self.host)

    def get_addr(self, key):
        hashgen = blake2b(digest_size=20)
        hashgen.update(key.encode('utf-8'))
        return hashgen.hexdigest()

    # Below methods return a human readable success/fail message.
    def is_unregistered(self, name):
        addr = self.get_addr(name)
        return self.contract.call().isUnregistered(addr)

    def register(self, name):
        addr = self.get_addr(name)
        print("Register: ", addr, name)
        res = self.contract.transact().register(name, addr)

        if res:
            return "Welcome: %s" % name
        return None

    def send_amount(self, from_addr, to_addr, amount):
        amount = int(amount)
        res = self.contract.transact().sendCoin(from_addr, to_addr, amount)
        if res:
            return "%s sent %d to %s" % (from_addr, amount, to_addr)
        return None

    # State methods below.

    def get_creator(self):
        return self.contract.call().getCreator()

    def get_balance(self, name):
        addr = self.get_addr(name)
        print("Balance: ", addr, name)
        res = self.contract.call().getBalance(addr)
        if res:
            return "%s has %d ToastCoin" % (name, res)
        return None



